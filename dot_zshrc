# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="myagnoster"

# update automatically without asking
zstyle ':omz:update' mode auto

# update frequency in days
zstyle ':omz:update' frequency 14

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

if [ $(arch) = "i386" ]; then
        eval "$(/usr/local/bin/brew shellenv)"
        alias python="/usr/local/bin/python3"
        # alias brew="/usr/local/bin/brew"
        alias pyenv86="arch -x86_64 pyenv"
        alias func="/usr/local/Cellar/azure-functions-core-tools@4/4.0.5198/func"

        plugins=(
            git
            zsh-nvm
        )
else
        plugins=(
            git
            zsh-nvm
            poetry
        )
fi

source $ZSH/oh-my-zsh.sh

## User configuration

# export MANPATH="/usr/local/man:$MANPATH"
export PATH="/Users/ispang/.local/bin:$PATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# nvm commands
# export NVM_DIR=~/.nvm
# source $(brew --prefix nvm)/nvm.sh

# fzf options
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--height=40% --layout=reverse --info=inline --border --margin=1 --padding=1"
export FZF_DEFAULT_COMMAND='rg --files --follow --no-ignore-vcs --hidden -g "!{node_modules/*,.git/*,OneDrive-Deloitte(O365D)/*,OneDrive/*}"'

## Aliases
# Example aliases
alias zshconfig="chezmoi edit ~/.zshrc"
alias ohmyzsh="cd ~/.oh-my-zsh"

# User defined aliases
# alias python="python3"
# alias pip="pip3"
alias now="date -Iseconds | sed 's/+.*$//'"

## Functions
# ranger edit to close ranger to current folder on Q
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )
    
    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

# apply local environment variables
function localenvs {
    if [[ -f ~/.localenv.sh && ~/.localenv ]]; then
        source ~/.localenv.sh "$@"
    fi
}

# gets the date given modifier
function get_date() {
    local modifier="${1:-+0S}"
    local valid_units=("y" "m" "w" "d" "H" "M" "S")

    # Check if the modifier is valid
    if [[ ! "${modifier}" =~ ^[-+][0-9]+[${valid_units[*]}]$ ]]; then
        echo "Invalid modifier: ${modifier}"
        return 1
    fi

    # Use the date program to print the modified date
    date -v "${modifier}" +"%Y-%m-%dT%H:%M:%S"
}

# Codon compiler path (added by install script)
export PATH=/Users/ispang/.codon/bin:$PATH

# pnpm
export PNPM_HOME="/Users/ispang/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# pyenv env vars
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


PATH=~/.console-ninja/.bin:$PATH
